# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w5Eqv_ZDRyw0m5zTgFKte-w7SneAEJY6
"""

print ("machine learning started on 10/07/2023 at 06:05PM")

"""#Numpy

"""

#single dimentional numpy array
import numpy as np
n1 = np.array([1,2,3,4])
print(n1)
type(n1)

#multi dimensional numpy array
import numpy as np
n2=np.array([[1,2,3,4],[5,6,7,8]])
n2
print(n2,type(n2))

#implementing numpy with zeros
import numpy as np
n3 = np.zeros((1,2))
n3

#implementing numpy with zeros
n4=np.zeros((5,5))
n4

#implementing numpy with same number
n5=np.full((2,3),19)
n5

#initializing numpy array with a range
n6=np.arange(10,50)#10 is inclusive, 50 is exclusive, if you want to inclue 50 use range 51
n6

#initializing numoy arrray with range and step
n7=np.arange(10,200,10)
n7

#initializing NumPY array with random numbers
n8=np.random.randint(10,20,2)#10-min 20-max 2-number of numbers to be selected
n8

#checking the shape of numpy array
n9=np.array([[1,2,3],[4,5,6]])
n9.shape

n9.shape=(3,2)
n9

#joining numpy arrays using vstack,hstack,column_stack
a1=np.array([1,2,3])
a2=np.array([4,5,6])
a3=np.vstack((a1,a2))
a4=np.hstack((a1,a2))
a5=np.column_stack((a1,a2))
print("a3:",a3,"\n a4:",a4,"\n a5:",a5)

b1=np.array([1,2,3,4,56,2,3,4,5])
b2=np.array([1,2,3,4,5,6,7,8,9])
b3=np.intersect1d(b1,b2)
b4=np.setdiff1d(b1,b2)
print(b3,b4)

b5=np.sum([b1,b2])
print(b5)
b6=np.sum([b1,b2],axis=0)
print(b6)
b7=np.sum([b1,b2],axis=1)
print(b7)

#basic addition,sub.multiply,div
b8=b1+1
print(b8)
b9=b1-1
print(b9)
b10=b1*2
print(b10)
b11=b1/2
print(b11)

#mean,median,standard deviation
b20=np.array([10,20,30,40,50,60])
print(np.mean(b20))
print(np.std(b1))
print(np.median(b1))

"""# Pandas"""

# used for  data maniulation
# single-dimensional data structures - Series Object
# Multi-dimensional - Data Frame
import pandas as pd
s1=pd.Series([1,2,3,4,5])
s1

type(s1)

#changing index
s1=pd.Series([1,2,3],index=['a','b','c'])
s1

type(s1)

s2=pd.Series({'a':100,'b':200},index=['b','a'])
s2

s4=pd.Series([1,2,3,4,5,6,7,8,9])
s4[1]

s4[-3:]#last three elements

s4+1

s4+s4

#data frame
sp=pd.DataFrame({'name':['bob','prasu','naidu'],'marks':[100,200,50]})
sp

iris=pd.read_csv('iris.csv')
iris.head(2)

iris.tail(10)

iris.shape

iris.describe()

iris.iloc[0:3,0:2]#here max limit is exclusive

iris.loc[1:4,('Sepal.Length','Petal.Length')]#here it is inclusive

iris.drop('Species',axis=1)#drop column

iris.drop([1,2,3],axis=0)

iris.mean()

iris.median()

iris.min()

iris.max()

def half(s):
   return s*0.5
iris[['Sepal.Width']].apply(half)

iris['Species'].value_counts()

iris.sort_values(by='Sepal.Length')

"""#Numpy vs Lists - Time Taken"""

from time import process_time

list1 = [i for i in range(1000)]
start_time = process_time()
list1 = [i+5 for i in list1]
end_time = process_time()
print(end_time-start_time)

import numpy as np

arr1 = np.array([i for i in range(1000)])
start_time = process_time()
arr1 += 5
end_time = process_time()
print(end_time-start_time)

"""#Numpy in depth"""

#single dimensional array
numpy1 = np.array([1,2,3])
print(numpy1)

numpy2 = np.array([(1,2,3,4),(1,2,4,3)])
print(numpy2)
print(len(numpy2))
print(numpy2.shape)

#converting numpy integer value into float
numpy3 = numpy2.astype(float)
print(numpy3)

"""#Initial  Placeholders in numpy array

"""

#create a numpy array of all zeroes of single dimentional
x = np.zeros((2,))
print(x)

#create a numpy array of all zeroes multi dimensional
x = np.zeros((2,4))
print(x)

# creation of a numpy aarray of ones
y = np.ones((3,3))
print(y)

#creation of numpy array of same value of required dimension
z = np.full((2,3),33)
z

# create an identity matrix
#all the diagonal values should be 1 and other  values should  be  zero
a= np.eye(5)
print('default we get an matrix of float values',a)
b=a.astype(int)
print('converted into int type using astype \n',b)

# create a numpy array with random values
a= np.random.randint(3,5,(4,5))#range and ssize included in randint
a

b=np.random.random((3,5)) #only size will be included. the range will be inbetween 0 and 1
b

# array of evenly spaced values
d = np.linspace(10,30,10)
print(d)
d_int=d.astype(int)
print(d_int)

# array of evenly spaced values --> specifying step
a = np.arange(10,30,5)
a

#convert a list into a numpy array
list2c= [10,20,20,20,50]
np_array = np.asarray(list2c)
print(np_array)
print(type(np_array))

"""#Analysing a Numpy Array"""

c = np.random.randint(10,100,(5,5))

print(c.shape)

#number of dimensions
print(c.ndim)

# number of elements in an array
print(c.size)

# checking the datatype of the values in the array
print(c.dtype)

"""#Mathematical Operations on a np array"""

list1=[1,2,3,4,5]
list2=[6,7,8,9,0]
print(list1 + list2)#concatenates or joins the two lists

a = np.random.randint(0,10,(3,3))
b = np.random.randint(10,20,(3,3))
print(a,'\n b= \n',b)

print(a+b)#in list if we add two lists it will concatenate the lists but in numpy it adds element wise

print(np.add(a,b))

print(np.subtract(a,b))

print(np.multiply(a,b))

"""#Array Manipulation"""

array = np.random.randint(0,10,(2,3))
print(array)
print(array.shape)

trans = np.transpose(array)#(2,3) matrix will be transposed into (3,2)
print(trans)
print(trans.shape)

trans2 = trans.T
trans2
print(trans2 == array)

#reshapinfg an array
a= np.random.randint(0,10,(2,3))
print(a)

b = a.reshape(3,2)
print(b)

"""#Numpy problem Solving"""

#1. Given a list [5,10,0,200]. now the output should be [10,15,5,205]
lst = [5,10,0,200]
lst = [i+5 for i in lst]
print(lst)

#solving this using numpy
import numpy as np
lst = np.array([5,10,0,200])
lst = lst+5
print(lst)

